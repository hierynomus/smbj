import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import java.text.SimpleDateFormat

plugins {
  id "java"
  id "groovy"
  id "jacoco"
  id "jdepend"
  id "maven-publish"
  id 'pl.allegro.tech.build.axion-release' version '1.10.1'
  id "com.github.hierynomus.license" version "0.15.0"
  id "com.bmuschko.docker-remote-api" version "4.6.2"
  id "com.jfrog.bintray" version "1.8.4"
  id 'ru.vyarus.java-lib' version '1.1.2'
  id 'ru.vyarus.github-info' version '1.1.0'
  id 'ru.vyarus.animalsniffer' version '1.5.0'
  id "idea"
  id 'org.sonarqube' version "2.7"
}

group = "com.hierynomus"
defaultTasks "build"

repositories {
  mavenCentral()
  maven { url "https://jitpack.io" }
  maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations.compile.transitive = false

dependencies {
  signature 'org.codehaus.mojo.signature:java17:1.0@signature'

  compile SLF4J_API
  compile BCPROV_JDK15ON
  compile MBASSADOR
  compile ASN_ONE
  testCompile GROOVY_ALL
  testRuntime CGLIB_NODEP
  testRuntime OBJENESIS
  testCompile SPOCK_CORE
  testCompile COMMONS_IO
  testRuntime LOGBACK_CLASSIC
}

license {
  header rootProject.file('LICENSE_HEADER')
  strictCheck true
  mapping {
    java = 'SLASHSTAR_STYLE'
  }
  excludes(['com/hierynomus/protocol/commons/Base64.java', '**/*.txt', '**/*.properties'])
}

scmVersion {
  tag {
    prefix = 'v'
    versionSeparator = ''
  }
  hooks {
    pre 'fileUpdate', [file: 'README.adoc', pattern: { v, c -> /:smbj_version: .*/}, replacement: { v, c -> ":smbj_version: $v" }]
    pre 'commit'
  }
}

project.version = scmVersion.version

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy {
      compileClasspath += sourceSets.main.output + sourceSets.test.output
      runtimeClasspath += sourceSets.main.output + sourceSets.test.output
      srcDir file('src/it/groovy')
    }
    resources.srcDir file('src/it/resources')
  }
}

task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat = 'full'
  }
  include "**/*Test.*"
  include "**/*Spec.*"
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

idea {
  module {
    testSourceDirs += file("src/it/groovy")
    // Ugly hack, the it/resources needs to be marked as testSourceDir before it can be picked up by the iml.withXml
    testSourceDirs += file('src/it/resources')
  }
  module.iml.withXml {
    def node = it.asNode()
    def content = node.component.find { it.'@name' == 'NewModuleRootManager' }.content[0]
    content.sourceFolder.findAll { it.@url?.contains('it/resources') }.each {
      it.@type = 'java-test-resource'
    }
  }
}

project.tasks.compileGroovy.onlyIf { false }

github {
  user 'hierynomus'
  license 'Apache'
}

pom {
  description 'SMB2 protocol library for communication with Windows servers'
  url 'https://github.com/hierynomus/smbj'
  developers {
    developer {
      id "hierynomus"
      name "Jeroen van Erp"
      email "jeroen@hierynomus.com"
      roles {
        role "Lead developer"
      }
    }
    developer {
      id "sbellan"
      name "Saravanan Bellan"
      email "sbellan@gmail.com"
      roles {
        role "Developer"
      }
    }
  }
}

if (project.hasProperty("bintrayUsername") && project.hasProperty("bintrayApiKey")) {
  bintray {
    user = project.property("bintrayUsername")
    key = project.property("bintrayApiKey")
    publish = true
    publications = ["maven"]
    pkg {
      repo = "maven"
      name = project.name
      licenses = ["Apache-2.0"]
      vcsUrl = "https://github.com/hierynomus/smbj.git"
      labels = ["smb", "smb2", "smb3", "network", "windows", "file-transfer"]
      githubRepo = "hierynomus/smbj"
      version {
        name = "${project.version}"
        vcsTag = "v${project.version}"
        released = new SimpleDateFormat('yyyy-MM-dd\'T\'HH:mm:ss.SSSZZ').format(new Date())
        gpg {
          sign = true
          passphrase = project.property("signing.password")
        }
        mavenCentralSync {
          sync = true
          user = project.property("sonatypeUsername")
          password = project.property("sonatypePassword")
          close = 1
        }
      }
    }
  }
}

jdepend {
  toolVersion = "2.9.1"
  sourceSets = [sourceSets.main]
  ignoreFailures = true
}

jdependMain {
  reports {
    xml.enabled true
    text.enabled false
  }
}

task jdependReport(dependsOn: jdependMain, group: 'verification', description: 'Generates a HTML report after executing jdepend checks.')
jdependReport.doLast {
  ant.xslt(
    in: "$reporting.baseDir/jdepend/main.xml",
    style: "$rootDir/conf/jdepend/jdepend-report.xslt",
    out: "$reporting.baseDir/jdepend/main.html")
}

check {
  dependsOn += ['jdependReport']
}

// java.lang.invoke.MethodHandle.invokeExact(Object[]) has a @PolymorphicSignature
// (see https://github.com/mojohaus/animal-sniffer/issues/18),
// so we ignore them from the sniffer
animalsniffer {
  ignore 'java.lang.invoke.MethodHandle'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

sonarqube {
  properties {
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.organization", "hierynomus-github"
    property "sonar.projectKey", "com.hierynomus:smbj"
    // property "sonar.login", project.property('sonar.login')
  }
}

task buildItestImage(type: DockerBuildImage) {
  inputDir = file('src/it/docker-image')
  tags = ['smbj/smbj-itest']
}

task createItestContainer(type: DockerCreateContainer) {
  dependsOn buildItestImage
  targetImageId buildItestImage.getImageId() 
  portBindings = ['445:445']
}

task startItestContainer(type: DockerStartContainer) {
  dependsOn createItestContainer
  targetContainerId createItestContainer.getContainerId()
}

task stopItestContainer(type: DockerStopContainer) {
  targetContainerId createItestContainer.getContainerId()
}

project.tasks.integrationTest.dependsOn(startItestContainer)
project.tasks.integrationTest.finalizedBy(stopItestContainer)

task forkedUploadRelease(type: GradleBuild) {
  buildFile = project.buildFile
  tasks = ["bintrayUpload"]
}

project.tasks.release.dependsOn([project.tasks.integrationTest, project.tasks.build])
project.tasks.release.finalizedBy(project.tasks.forkedUploadRelease)

project.tasks.jacocoTestReport.dependsOn(project.tasks.test)
project.tasks.check.dependsOn(project.tasks.jacocoTestReport)
