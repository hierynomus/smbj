import java.text.SimpleDateFormat

plugins {
  id "java"
  id "groovy"
  id "jacoco"
  id "maven-publish"
  id "org.ajoberstar.release-opinion" version "1.4.2"
  id "com.github.hierynomus.license" version "0.12.1"
  id "com.jfrog.bintray" version "1.7"
  id 'ru.vyarus.pom' version '1.0.3'
  id 'ru.vyarus.github-info' version '1.1.0'
}

group = "com.hierynomus"
defaultTasks "build"

configurations { codacy }
repositories {
  mavenCentral()
  maven { url "https://jitpack.io" }
  maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations.compile.transitive = false

def bouncycastleVersion = "1.54"

dependencies {
  compile "org.slf4j:slf4j-api:1.7.13"
  compile "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
  compile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
  compile 'net.engio:mbassador:1.2.4.2'
  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile 'commons-io:commons-io:2.5'
  testRuntime 'ch.qos.logback:logback-classic:1.1.3'
  testRuntime 'cglib:cglib-nodep:2.2'
  codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}

license {
  header rootProject.file('LICENSE_HEADER')
  strictCheck true
  mapping {
    java = 'SLASHSTAR_STYLE'
  }
  excludes(['com/hierynomus/protocol/commons/Base64.java', '**/*.txt', '**/*.properties'])
}

release {
  grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy {
      compileClasspath += sourceSets.main.output + sourceSets.test.output
      runtimeClasspath += sourceSets.main.output + sourceSets.test.output
      srcDir file('src/it/groovy')
    }
    resources.srcDir file('src/it/resources')
  }
}

task integrationTest(type: Test) {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat = 'full'
  }
  include "**/*Test.*"
  include "**/*Spec.*"
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

project.tasks.compileGroovy.onlyIf { false }

github {
  user 'hierynomus'
  license 'Apache'
}

pom {
  description 'SMB2 protocol library for communication with Windows servers'
  url 'https://github.com/hierynomus/smbj'
  developers {
    developer {
      id "hierynomus"
      name "Jeroen van Erp"
      email "jeroen@hierynomus.com"
      roles {
        role "Lead developer"
      }
    }
    developer {
      id "sbellan"
      name "Saravanan Bellan"
      email "sbellan@gmail.com"
      roles {
        role "Developer"
      }
    }
  }
}

publishing {
  publications {
    Smbj(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
}

if (project.hasProperty("bintrayUsername") && project.hasProperty("bintrayApiKey")) {
  bintray {
    user = project.property("bintrayUsername")
    key = project.property("bintrayApiKey")
    publish = true
    publications = ["Smbj"]
    pkg {
      repo = "maven"
      name = project.name
      licenses = ["Apache-2.0"]
      vcsUrl = "https://github.com/hierynomus/smbj.git"
      labels = ["smb", "smb2", "smb3", "network", "windows", "file-transfer"]
      githubRepo = "hierynomus/smbj"
      version {
        name = project.version.toString()
        vcsTag = "v${project.version}"
        released = new SimpleDateFormat('yyyy-MM-dd\'T\'HH:mm:ss.SSSZZ').format(new Date())
        gpg {
          sign = true
          passphrase = project.property("signing.password")
        }
        mavenCentralSync {
          sync = true
          user = project.property("sonatypeUsername")
          password = project.property("sonatypePassword")
          close = 1
        }
      }
    }
  }
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = [
    "-l",
    "Java",
    "-r",
    "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  ]
}

project.tasks.release.dependsOn(project.tasks.bintrayUpload)
project.tasks.jacocoTestReport.dependsOn(project.tasks.test)