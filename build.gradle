import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import java.text.SimpleDateFormat

plugins {
  id "java"
  id "groovy"
  id "jacoco"
  id "maven-publish"
  id "signing"
  id 'pl.allegro.tech.build.axion-release' version '1.13.3'
  // id "com.github.hierynomus.license" version "0.16.1"
  id "com.bmuschko.docker-remote-api" version "7.1.0"
  // id 'ru.vyarus.java-lib' version '2.1.0'
  id 'ru.vyarus.github-info' version '1.2.0'
  id 'ru.vyarus.animalsniffer' version '1.5.3'
  id 'org.sonarqube' version "2.7"
  // id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

group = "com.hierynomus"
ext.moduleName = "${project.group}.${project.name}"

defaultTasks "build"

repositories {
  mavenCentral()
  maven { url "https://jitpack.io" }
}

scmVersion {
  tag {
    prefix = 'v'
    versionSeparator = ''
  }
  hooks {
    pre 'fileUpdate', [file: 'README.adoc', pattern: { v, c -> /:smbj_version: .*/}, replacement: { v, c -> ":smbj_version: $v" }]
    pre 'commit'
  }
}

project.version = scmVersion.version

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations.implementation.transitive = false

dependencies {
  signature 'org.codehaus.mojo.signature:java17:1.0@signature'

  implementation SLF4J_API
  implementation BCPROV_JDK15ON
  implementation MBASSADOR
  implementation ASN_ONE
  testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.0")
  testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.0")

  testImplementation GROOVY_ALL
  testRuntimeOnly CGLIB_NODEP
  testRuntimeOnly OBJENESIS
  testImplementation SPOCK_CORE
  testImplementation COMMONS_IO
  testRuntimeOnly LOGBACK_CLASSIC
}

tasks.withType(Test) {
  useJUnitPlatform()
}

// license {
//   header rootProject.file('LICENSE_HEADER')
//   strictCheck true
//   mapping {
//     java = 'SLASHSTAR_STYLE'
//   }
//   excludes(['com/hierynomus/protocol/commons/Base64.java', '**/*.txt', '**/*.properties', "com/hierynomus/security/jce/messagedigest/MD4.java"])
// }

jar {
    inputs.property("moduleName", moduleName)

    manifest {
       attributes  'Automatic-Module-Name': moduleName
   }
}


java {
	withJavadocJar()
	withSourcesJar()
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy {
      compileClasspath += sourceSets.main.output + sourceSets.test.output
      runtimeClasspath += sourceSets.main.output + sourceSets.test.output
      srcDir file('src/it/groovy')
    }
    resources.srcDir file('src/it/resources')
  }
}

task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
  testLogging {
    exceptionFormat = 'full'
  }
  include "**/*Test.*"
  include "**/*Spec.*"
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

project.tasks.compileGroovy.onlyIf { false }

github {
  user 'hierynomus'
  license 'Apache'
}

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
		}
	}
}

project.signing {
  required { project.gradle.taskGraph.hasTask("release") }
	sign publishing.publications.maven

  if (project.hasProperty("signingKeyId") || project.hasProperty("signingKey")) {
		def signingKeyId = project.findProperty("signingKeyId")
		def signingKey = project.findProperty("signingKey")
		def signingPassword = project.findProperty("signingPassword")
		if (signingKeyId) {
			useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
		} else if (signingKey) {
			useInMemoryPgpKeys(signingKey, signingPassword)
		}
	}
}

project.plugins.withType(MavenPublishPlugin).all {
	PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
	publishing.publications.withType(MavenPublication).all { mavenPublication ->
		mavenPublication.pom {
			name = "${project.name}"
			description = "SMB2 protocol library for communication with Windows servers"
			url = "https://github.com/hierynomus/smbj"
			licenses {
				license {
					name = "The Apache License, Version 2.0"
					url = "https://www.apache.org/licenses/LICENSE-2.0"
				}
			}
			developers {
				developer {
					id = "hierynomus"
					name = "Jeroen van Erp"
					email = "jeroen@hierynomus.com"
				}
			}
      scm {
        url = "https://github.com/hierynomus/${project.name}"
        connection = "scm:git@github.com:hierynomus/${project.name}.git"
        developerConnection = "scm:git@github.com:hierynomus/${project.name}.git"
      }
		}
	}
}

// nexusPublishing {
// 	repositories {
// 		sonatype()    //sonatypeUsername and sonatypePassword properties are used automatically
// 	}

// 	connectTimeout = Duration.ofMinutes(3)
// 	clientTimeout = Duration.ofMinutes(3)
// }

// java.lang.invoke.MethodHandle.invokeExact(Object[]) has a @PolymorphicSignature
// (see https://github.com/mojohaus/animal-sniffer/issues/18),
// so we ignore them from the sniffer
animalsniffer {
  ignore 'java.lang.invoke.MethodHandle'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

sonarqube {
  properties {
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.organization", "hierynomus-github"
    property "sonar.projectKey", "com.hierynomus:smbj"
    // property "sonar.login", project.property('sonar.login')
  }
}


task buildItestImage(type: DockerBuildImage) {
  inputDir = file('src/it/docker-image')
  images.add('smbj/smbj-itest:latest')
}

task createItestContainer(type: DockerCreateContainer) {
  dependsOn buildItestImage
  targetImageId buildItestImage.getImageId()
  hostConfig.portBindings = ['445:445']
  hostConfig.autoRemove = true
}

task startItestContainer(type: DockerStartContainer) {
    dependsOn createItestContainer
    targetContainerId createItestContainer.getContainerId()
}

task stopItestContainer(type: DockerStopContainer) {
    targetContainerId createItestContainer.getContainerId()
}

project.tasks.integrationTest.dependsOn(startItestContainer)
project.tasks.integrationTest.finalizedBy(stopItestContainer)

task forkedUploadRelease(type: GradleBuild) {
  buildFile = project.buildFile
  tasks = ["clean", "publishToSonatype", "closeAndReleaseSonatypeStagingRepository"]
}

project.tasks.release.dependsOn([project.tasks.integrationTest, project.tasks.build])
project.tasks.release.finalizedBy(project.tasks.forkedUploadRelease)

project.tasks.jacocoTestReport.dependsOn(project.tasks.test)
project.tasks.check.dependsOn(project.tasks.jacocoTestReport)
